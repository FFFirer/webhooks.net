//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class GroupClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7029";
    }

    list(): Promise<GroupDto[]> {
        let url_ = this.baseUrl + "/api/Group/List";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processList(_response);
        });
    }

    protected processList(response: Response): Promise<GroupDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if(resultData200['__wrapped'])
            {
                if(resultData200.success){
                    resultData200 = resultData200.result;
                }
                else{
                    throwException(resultData200.error, status, _responseText, _headers)
                }
            }
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GroupDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("服务器发生意外错误。", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GroupDto[]>(null as any);
    }

    query(input: PageGroupInput): Promise<PagingResultOfGroupDto> {
        let url_ = this.baseUrl + "/api/Group/Query";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQuery(_response);
        });
    }

    protected processQuery(response: Response): Promise<PagingResultOfGroupDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if(resultData200['__wrapped'])
            {
                if(resultData200.success){
                    resultData200 = resultData200.result;
                }
                else{
                    throwException(resultData200.error, status, _responseText, _headers)
                }
            }
            result200 = PagingResultOfGroupDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("服务器发生意外错误。", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PagingResultOfGroupDto>(null as any);
    }

    save(groupDto: GroupDto): Promise<void> {
        let url_ = this.baseUrl + "/api/Group/Save";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(groupDto);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSave(_response);
        });
    }

    protected processSave(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("服务器发生意外错误。", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    remove(input: RemoveGroupInput): Promise<void> {
        let url_ = this.baseUrl + "/api/Group/Remove";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRemove(_response);
        });
    }

    protected processRemove(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("服务器发生意外错误。", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class WorkClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:7029";
    }

    query(input: PagingInput): Promise<PagingResultOfWorkDto> {
        let url_ = this.baseUrl + "/api/Work/Query";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQuery(_response);
        });
    }

    protected processQuery(response: Response): Promise<PagingResultOfWorkDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if(resultData200['__wrapped'])
            {
                if(resultData200.success){
                    resultData200 = resultData200.result;
                }
                else{
                    throwException(resultData200.error, status, _responseText, _headers)
                }
            }
            result200 = PagingResultOfWorkDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("服务器发生意外错误。", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PagingResultOfWorkDto>(null as any);
    }

    save(workDto: WorkDto): Promise<void> {
        let url_ = this.baseUrl + "/api/Work/Save";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(workDto);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSave(_response);
        });
    }

    protected processSave(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("服务器发生意外错误。", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    remove(input: RemoveWorkInput): Promise<void> {
        let url_ = this.baseUrl + "/api/Work/Remove";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRemove(_response);
        });
    }

    protected processRemove(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("服务器发生意外错误。", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class DtoOfGuid implements IDtoOfGuid {
    id!: string;

    constructor(data?: IDtoOfGuid) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DtoOfGuid {
        data = typeof data === 'object' ? data : {};
        let result = new DtoOfGuid();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IDtoOfGuid {
    id: string;
}

export class GroupDto extends DtoOfGuid implements IGroupDto {
    name?: string | undefined;
    description?: string | undefined;

    constructor(data?: IGroupDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): GroupDto {
        data = typeof data === 'object' ? data : {};
        let result = new GroupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        super.toJSON(data);
        return data;
    }
}

export interface IGroupDto extends IDtoOfGuid {
    name?: string | undefined;
    description?: string | undefined;
}

export class PagingResultOfGroupDto implements IPagingResultOfGroupDto {
    rows!: GroupDto[];
    total!: number;
    page!: number;
    pageSize!: number;

    constructor(data?: IPagingResultOfGroupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.rows = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["rows"])) {
                this.rows = [] as any;
                for (let item of _data["rows"])
                    this.rows!.push(GroupDto.fromJS(item));
            }
            this.total = _data["total"];
            this.page = _data["page"];
            this.pageSize = _data["pageSize"];
        }
    }

    static fromJS(data: any): PagingResultOfGroupDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagingResultOfGroupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.rows)) {
            data["rows"] = [];
            for (let item of this.rows)
                data["rows"].push(item.toJSON());
        }
        data["total"] = this.total;
        data["page"] = this.page;
        data["pageSize"] = this.pageSize;
        return data;
    }
}

export interface IPagingResultOfGroupDto {
    rows: GroupDto[];
    total: number;
    page: number;
    pageSize: number;
}

export class PageGroupInput implements IPageGroupInput {
    page!: number;
    pageSize!: number;

    constructor(data?: IPageGroupInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.page = _data["page"];
            this.pageSize = _data["pageSize"];
        }
    }

    static fromJS(data: any): PageGroupInput {
        data = typeof data === 'object' ? data : {};
        let result = new PageGroupInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["page"] = this.page;
        data["pageSize"] = this.pageSize;
        return data;
    }
}

export interface IPageGroupInput {
    page: number;
    pageSize: number;
}

export class RemoveGroupInput implements IRemoveGroupInput {
    id!: string;

    constructor(data?: IRemoveGroupInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): RemoveGroupInput {
        data = typeof data === 'object' ? data : {};
        let result = new RemoveGroupInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IRemoveGroupInput {
    id: string;
}

export class PagingResultOfWorkDto implements IPagingResultOfWorkDto {
    rows!: WorkDto[];
    total!: number;
    page!: number;
    pageSize!: number;

    constructor(data?: IPagingResultOfWorkDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.rows = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["rows"])) {
                this.rows = [] as any;
                for (let item of _data["rows"])
                    this.rows!.push(WorkDto.fromJS(item));
            }
            this.total = _data["total"];
            this.page = _data["page"];
            this.pageSize = _data["pageSize"];
        }
    }

    static fromJS(data: any): PagingResultOfWorkDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagingResultOfWorkDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.rows)) {
            data["rows"] = [];
            for (let item of this.rows)
                data["rows"].push(item.toJSON());
        }
        data["total"] = this.total;
        data["page"] = this.page;
        data["pageSize"] = this.pageSize;
        return data;
    }
}

export interface IPagingResultOfWorkDto {
    rows: WorkDto[];
    total: number;
    page: number;
    pageSize: number;
}

export class WorkDto extends DtoOfGuid implements IWorkDto {
    displayName?: string | undefined;

    constructor(data?: IWorkDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.displayName = _data["displayName"];
        }
    }

    static fromJS(data: any): WorkDto {
        data = typeof data === 'object' ? data : {};
        let result = new WorkDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        super.toJSON(data);
        return data;
    }
}

export interface IWorkDto extends IDtoOfGuid {
    displayName?: string | undefined;
}

export class PagingInput implements IPagingInput {
    page!: number;
    pageSize!: number;

    constructor(data?: IPagingInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.page = _data["page"];
            this.pageSize = _data["pageSize"];
        }
    }

    static fromJS(data: any): PagingInput {
        data = typeof data === 'object' ? data : {};
        let result = new PagingInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["page"] = this.page;
        data["pageSize"] = this.pageSize;
        return data;
    }
}

export interface IPagingInput {
    page: number;
    pageSize: number;
}

export class RemoveWorkInput implements IRemoveWorkInput {
    id!: string;

    constructor(data?: IRemoveWorkInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): RemoveWorkInput {
        data = typeof data === 'object' ? data : {};
        let result = new RemoveWorkInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IRemoveWorkInput {
    id: string;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}